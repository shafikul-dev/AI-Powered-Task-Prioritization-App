#!/usr/bin/env node

/**
 * Setup script for AI-Powered Task Prioritization App
 * This script helps users configure the application quickly
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function question(prompt) {
    return new Promise((resolve) => {
        rl.question(prompt, resolve);
    });
}

async function setup() {
    console.log('üöÄ AI-Powered Task Prioritization App Setup');
    console.log('==========================================\n');
    
    console.log('This script will help you configure your AI API key.\n');
    
    // Check if .env already exists
    const envPath = path.join(__dirname, '.env');
    if (fs.existsSync(envPath)) {
        const overwrite = await question('‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ');
        if (overwrite.toLowerCase() !== 'y' && overwrite.toLowerCase() !== 'yes') {
            console.log('Setup cancelled.');
            rl.close();
            return;
        }
    }
    
    // Choose AI service
    console.log('ü§ñ Choose your AI service:');
    console.log('1. OpenAI (GPT-3.5-turbo) - Recommended');
    console.log('2. Google Gemini');
    console.log('3. Anthropic Claude');
    console.log('4. Groq (Fast & Free) - Great for development');
    
    const serviceChoice = await question('\nEnter your choice (1-4): ');
    
    let service, apiKeyPrompt;
    switch (serviceChoice) {
        case '1':
            service = 'openai';
            apiKeyPrompt = 'Enter your OpenAI API key: ';
            break;
        case '2':
            service = 'gemini';
            apiKeyPrompt = 'Enter your Google Gemini API key: ';
            break;
        case '3':
            service = 'anthropic';
            apiKeyPrompt = 'Enter your Anthropic Claude API key: ';
            break;
        case '4':
            service = 'groq';
            apiKeyPrompt = 'Enter your Groq API key: ';
            break;
        default:
            console.log('‚ùå Invalid choice. Using OpenAI as default.');
            service = 'openai';
            apiKeyPrompt = 'Enter your OpenAI API key: ';
    }
    
    // Get API key
    const apiKey = await question(`\n${apiKeyPrompt}`);
    
    if (!apiKey.trim()) {
        console.log('‚ùå No API key provided. Setup cancelled.');
        rl.close();
        return;
    }
    
    // Create .env file
    let envContent = `# AI API Configuration\n`;
    envContent += `# Generated by setup script on ${new Date().toISOString()}\n\n`;
    
    if (service === 'openai') {
        envContent += `OPENAI_API_KEY=${apiKey}\n`;
    } else if (service === 'gemini') {
        envContent += `GEMINI_API_KEY=${apiKey}\n`;
    } else if (service === 'anthropic') {
        envContent += `ANTHROPIC_API_KEY=${apiKey}\n`;
    } else if (service === 'groq') {
        envContent += `GROQ_API_KEY=${apiKey}\n`;
    }
    
    envContent += `\n# Server Configuration\n`;
    envContent += `PORT=3000\n`;
    
    try {
        fs.writeFileSync(envPath, envContent);
        console.log('\n‚úÖ .env file created successfully!');
        
        // Update server.js to use the selected service
        const serverPath = path.join(__dirname, 'server.js');
        let serverContent = fs.readFileSync(serverPath, 'utf8');
        
        // Replace the AI_SERVICE constant
        const serviceLine = `const AI_SERVICE = '${service}'; // Change to 'gemini' or 'anthropic' as needed`;
        serverContent = serverContent.replace(
            /const AI_SERVICE = '[^']*'; \/\/ Change to 'gemini' or 'anthropic' as needed/,
            serviceLine
        );
        
        fs.writeFileSync(serverPath, serverContent);
        console.log(`‚úÖ Server configured to use ${service.toUpperCase()}`);
        
        console.log('\nüéâ Setup completed successfully!');
        console.log('\nüìã Next steps:');
        console.log('1. Run: npm start');
        console.log('2. Open: http://localhost:3000');
        console.log('3. Start adding and prioritizing tasks!');
        
        console.log('\nüí° Tips:');
        console.log('- Your tasks are saved locally in your browser');
        console.log('- The AI analyzes urgency, importance, and context');
        console.log('- Try adding different types of tasks for better results');
        
    } catch (error) {
        console.error('‚ùå Setup failed:', error.message);
    }
    
    rl.close();
}

// Run setup
if (require.main === module) {
    setup().catch(console.error);
}

module.exports = { setup };

